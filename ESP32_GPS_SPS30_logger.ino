#include <Arduino.h>
#include "FS.h"
#include "SD.h"
#include "SPI.h"
#include <TinyGPS++.h>
#include <sps30.h>
#include <U8g2lib.h>

#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif

TinyGPSPlus gps;



U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);
#define PONTES_logo_width 61
#define PONTES_logo_height 64
static const unsigned char PONTES_logo_bits[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
  0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x01,
  0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x1f,
  0x00, 0x00, 0xfc, 0x7f, 0x00, 0xe0, 0xff, 0x1f, 0x00, 0x00, 0xff, 0x01,
  0x00, 0x00, 0xf8, 0x1f, 0x00, 0x80, 0x7f, 0x00, 0x00, 0x00, 0x80, 0x1f,
  0x00, 0xc0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0xc0, 0x07, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x40, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8,
  0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3f, 0xfe, 0xf8, 0x07, 0x00,
  0x00, 0x00, 0xff, 0x1f, 0xfc, 0xff, 0x3f, 0x00, 0x00, 0x80, 0xff, 0x0f,
  0xf8, 0xff, 0x7f, 0x00, 0x00, 0x80, 0xff, 0x07, 0xf0, 0xff, 0xff, 0x00,
  0x00, 0xc0, 0xff, 0x07, 0xf0, 0xff, 0xff, 0x01, 0x00, 0xc0, 0xe3, 0x07,
  0xf0, 0xff, 0xff, 0x03, 0x00, 0xc0, 0xc1, 0x07, 0xf0, 0x0f, 0xfe, 0x07,
  0x00, 0xc0, 0x81, 0x07, 0xf0, 0x07, 0xf8, 0x07, 0x00, 0xc0, 0x80, 0x07,
  0xf0, 0x03, 0xf0, 0x0f, 0x00, 0xc0, 0x00, 0x07, 0xf0, 0x03, 0xf0, 0x0f,
  0x00, 0xc0, 0x00, 0x07, 0xf0, 0x03, 0xe0, 0x0f, 0x00, 0xc0, 0x00, 0x07,
  0xf0, 0x03, 0xe0, 0x0f, 0x00, 0xc0, 0x00, 0x07, 0xf0, 0x03, 0xe0, 0x1f,
  0x00, 0xc0, 0x00, 0x07, 0xf0, 0x03, 0xe0, 0x1f, 0x00, 0xc0, 0x00, 0x07,
  0xf0, 0x03, 0xe0, 0x1f, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x03, 0xe0, 0x1f,
  0x00, 0x00, 0x00, 0x07, 0xf0, 0x03, 0xe0, 0x1f, 0x00, 0x00, 0x00, 0x00,
  0xf0, 0x03, 0xe0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0xe0, 0x1f,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x1f, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xe0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1f,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x7c, 0x18, 0xf6,
  0xcf, 0x8f, 0x1f, 0x00, 0x3f, 0xfe, 0x38, 0xe6, 0xcf, 0xcf, 0x09, 0x00,
  0x63, 0xc3, 0x39, 0x86, 0xc1, 0xc0, 0x01, 0x00, 0x73, 0x83, 0x79, 0x86,
  0xc1, 0x87, 0x03, 0x00, 0x3f, 0x83, 0xd9, 0x87, 0xc1, 0x8f, 0x0f, 0x00,
  0x1f, 0x83, 0x99, 0x87, 0xc1, 0x00, 0x1c, 0x00, 0x03, 0xc7, 0x99, 0x87,
  0xc1, 0x00, 0x18, 0x00, 0x03, 0xfe, 0x18, 0x87, 0xc1, 0xdf, 0x1d, 0x00,
  0x03, 0x7c, 0x18, 0x86, 0xc1, 0xdf, 0x0f, 0x00
};


unsigned long previousMillis = 0;

void setup() {
  Serial.begin(9600);
  Serial2.begin(9600);
  u8g2.setBusClock(100000);    // sps30 max busspeed is 100kHz 
  u8g2.begin();
  u8g2.clearBuffer();          // clear the internal memory
  u8g2.setFont(u8g2_font_courR10_tr);
  u8g2.drawXBMP( 67, 0, PONTES_logo_width, PONTES_logo_height, PONTES_logo_bits);
  u8g2.drawStr(0, 28, "FIJNSTOF");
  u8g2.drawStr(8, 40, "LOGGER");
  u8g2.sendBuffer();          // transfer internal memory to the display
  delay(5000);
  u8g2.clearBuffer();         // clear the internal memory
  u8g2.setFont(u8g2_font_courR08_tr);
  u8g2.drawStr(0, 8, "Idee en realisatie:");
  u8g2.setFont(u8g2_font_courR10_tr);
  u8g2.drawStr(0, 30, "Klaas Groot");
  u8g2.drawStr(0, 45, "Diane Robyn");
  u8g2.drawStr(0, 60, "Jan Barten");
  u8g2.sendBuffer();          // transfer internal memory to the display
  delay(3000);

  // SPS30
  int16_t ret;
  uint32_t auto_clean;
  sensirion_i2c_init();
  delay(10);
  while (sps30_probe() != 0) {
    Serial.println("SPS sensor probing failed");
    delay(500);
  }
  Serial.print("SPS sensor probing successful\n");
  ret = sps30_set_fan_auto_cleaning_interval(3000); // cleaning interval in seconds
  if (ret) {
    Serial.print("error setting the auto-clean interval: ");
    Serial.println(ret);
  }

  ret = sps30_start_measurement();
  if (ret < 0) {
    Serial.print("error starting measurement\n");
  }
  Serial.print("Measurements started\n");

  if (!SD.begin()) {
    Serial.println("Card Mount Failed");
    return;
  }
  uint8_t cardType = SD.cardType();

  if (cardType == CARD_NONE) {
    Serial.println("No SD card attached");
    return;
  }

  Serial.println("SD ok!");
  delay(2000);
  String dataString;
  dataString += ("lat");
  dataString += ",";
  dataString += ("long");
  dataString += ",";
  dataString += ("date");
  dataString += ",";
  dataString += ("time");
  dataString += ",";
  dataString += ("PM2.5");
  dataString += (",");
  dataString += ("PM10");
  dataString += "\r\n";
  Serial.print("Gonna log: ");
  Serial.println(dataString);
  appendFile(SD, "/data.txt", dataString.c_str());
  delay(2000);
}

void loop() {
  while (Serial2.available() > 0)
    if (gps.encode(Serial2.read()))
      if (millis() > 5000 && gps.charsProcessed() < 10) {
        Serial.println(F("No GPS detected: check wiring."));
        while (true);
      }

  if (millis() - previousMillis >= 1000) {
    previousMillis = millis();
    struct sps30_measurement m;
    char serial[SPS30_MAX_SERIAL_LEN];
    uint16_t data_ready;
    int16_t ret;

    do {
      ret = sps30_read_data_ready(&data_ready);
      if (ret < 0) {
        Serial.print("error reading data-ready flag: ");
        Serial.println(ret);
      } else if (!data_ready)
        Serial.print("data not ready, no new measurement available\n");
      else
        break;
      delay(200); /* retry in 100ms */
    } while (1);

    ret = sps30_read_measurement(&m);
    if (ret < 0) {
      Serial.print("error reading measurement\n");
    } else {
      Serial.println();
      Serial.print("PM  2.5: ");
      Serial.println(m.mc_2p5);
      Serial.print("PM 10.0: ");
      Serial.println(m.mc_10p0);
      Serial.println();
      u8g2.clearBuffer();          // clear the internal memory
      u8g2.setFont(u8g2_font_courR14_tr); // choose a suitable font
      u8g2.drawStr(0, 18, "PM2.5:"); // write something to the internal memory
      u8g2.setCursor(75, 18);
      u8g2.print(m.mc_2p5);
      u8g2.drawStr(0, 40, "PM10:"); // write something to the internal memory
      u8g2.setCursor(75, 40);
      u8g2.print(m.mc_10p0);
      u8g2.setFont(u8g2_font_courR08_tn);
      u8g2.setCursor(5, 64);
      u8g2.print(gps.location.lat(), 6);
      u8g2.print(" ");
      u8g2.print(gps.location.lng(), 6);
      u8g2.sendBuffer();          // transfer internal memory to the display
      delay(1000);
      displayInfo();
    }

    if (gps.time.second() % 20 == 0) {
      if (gps.location.isValid()) {
        String dataString;
        dataString += String(gps.location.lat(), 6);
        dataString += ",";
        dataString += String(gps.location.lng(), 6);
        dataString += ",";
        dataString += gps.date.day();
        dataString += "/";
        dataString += gps.date.month();
        dataString += "/";
        dataString += gps.date.year();
        dataString += ",";
        dataString += gps.time.hour() + 1;
        dataString += ":";
        dataString += gps.time.minute();
        dataString += ":";
        dataString += gps.time.second();
        dataString += ",";
        dataString += m.mc_2p5;
        dataString += ",";
        dataString += m.mc_10p0;
        dataString += "\r\n";           // end of record
        appendFile(SD, "/data.txt", dataString.c_str());
        Serial.println();
        Serial.println(dataString);
        Serial.println();
        u8g2.clearBuffer();         // clear the internal memory
        u8g2.setFont(u8g2_font_courR18_tr);
        u8g2.drawStr(15, 40, "OPSLAAN");
        u8g2.sendBuffer();          // transfer internal memory to the display
        delay(400);
      }
    }
  }
}

void displayInfo()  {
  Serial.print(F("Location: "));
  if (gps.location.isValid()) {
    Serial.print(gps.location.lat(), 6);
    Serial.print(F(","));
    Serial.print(gps.location.lng(), 6);
  }
  else  {
    Serial.print(F("INVALID"));
  }

  Serial.print(F("  Date/Time: "));
  if (gps.date.isValid()) {
    Serial.print(gps.date.day());
    Serial.print(F("/"));
    Serial.print(gps.date.month());
    Serial.print(F("/"));
    Serial.print(gps.date.year());
  }
  else
  {
    Serial.print(F("INVALID"));
  }

  Serial.print(F(" "));
  if (gps.time.isValid()) {
    if (gps.time.hour() < 10) Serial.print(F("0"));
    Serial.print(gps.time.hour()+1);
    Serial.print(F(":"));
    if (gps.time.minute() < 10) Serial.print(F("0"));
    Serial.print(gps.time.minute());
    Serial.print(F(":"));
    if (gps.time.second() < 10) Serial.print(F("0"));
    Serial.print(gps.time.second());
  }
  else  {
    Serial.print(F("INVALID"));
  }
  Serial.println();
}

void appendFile(fs::FS & fs, const char * path, const char * message) {
  Serial.println();
  Serial.printf("Appending to file: %s\n", path);

  File file = fs.open(path, FILE_APPEND);
  if (!file) {
    Serial.println("Failed to open file for appending");
    delay(100);
    return;
  }
  if (file.print(message)) {
    Serial.println("Data appended");
    Serial.println();
  } else {
    Serial.println("Append failed");
  }
  file.close();
}
